// Code generated by go-bindata.
// sources:
// data/Dockerfile
// data/docker-compose.yml
// DO NOT EDIT!

package docker

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\x4f\x4b\xc3\x30\x18\xc6\xef\xf9\x14\x2f\x83\x9e\x64\x89\x82\x78\x10\x11\x45\x22\x78\x68\x1b\xea\x04\x87\x78\x68\xd3\x6c\x0b\xe4\x4f\x49\xfa\xc2\x40\xf6\xdd\x4d\x8d\x53\x9c\x3b\xec\x90\x90\xfc\x9e\xe7\x7d\xc8\x43\x1e\x9b\xba\x04\xec\xd0\x8d\x78\x7d\x71\x45\xcf\x2f\x49\x79\xff\x54\x2d\xd2\xe2\x0d\x94\x6d\x90\x1e\x4a\xbd\x36\x5a\x05\xed\x5a\xb8\xb1\x13\xa1\xf6\x87\xdc\x69\x69\x3c\xf6\x54\x7a\x7b\x4b\xc8\x43\x2d\x96\x20\xbd\x5b\x01\x9b\xf6\x6f\x10\xd5\x88\x03\x8d\x1b\x60\xa3\x1d\xd8\xfe\x46\x9a\x97\x0a\xe4\xc6\xfa\x1e\xce\xb6\x47\xa4\xbf\x84\x7c\x14\xa0\x57\x40\x85\x0f\x63\xa4\x7c\x3b\xf8\xa8\xa0\xd8\x25\x1a\x5a\xb7\x56\x07\xc2\xbc\xd8\x11\xfe\x2a\xea\x67\x0e\xc9\x41\x93\x71\x9a\x57\xae\xcf\x23\xd3\x61\x9e\xd9\x6f\xa6\xc0\xce\xe8\xf4\xc8\xff\xa1\x7b\xe5\xc4\xd4\x5c\x3a\xa0\xfb\xaa\x8c\x31\x30\xe3\x65\x6b\x58\xa7\x1d\xcb\xf4\xa0\xfa\x51\x0b\xe1\xd5\xa2\x59\x8a\x3a\xfd\x05\xbc\xcd\x32\x9c\xbd\x7f\x06\x00\x00\xff\xff\xfb\x3d\x0c\xe2\xae\x01\x00\x00")

func dataDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_dataDockerfile,
		"data/Dockerfile",
	)
}

func dataDockerfile() (*asset, error) {
	bytes, err := dataDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Dockerfile", size: 430, mode: os.FileMode(420), modTime: time.Unix(1473080983, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x52\x3d\x6f\xc2\x30\x10\xdd\xf9\x15\xa7\xa8\x88\x09\x5b\xea\x68\xa9\x03\x63\x97\x8a\xa1\x3b\x32\xc9\xd5\x9c\x48\x6c\x74\xe7\xa4\xad\x50\xff\x7b\xed\x24\x34\x2e\x22\x8b\xef\xe3\xbd\x7b\xcf\x17\x0f\xc8\x42\xc1\x1b\xd8\x3c\x6f\x56\x1e\xe3\x67\xe0\xb3\x98\x15\x40\xe8\x3c\x59\xb3\x12\xe4\x81\x6a\x4c\xa5\xeb\x7a\x0b\x4f\x96\x9d\x80\x79\x01\xb5\xcb\xc1\xfa\x67\xac\xb2\xf5\x0e\x41\xbd\x87\xd0\xca\x4e\x04\xe3\xd8\x01\xb8\xae\x41\xbd\xd9\x0e\x53\x96\x27\x02\x1c\x7b\x6a\x1b\x03\x4a\x17\x9d\xb1\x41\x9d\x75\x68\x32\x81\x7c\x83\x5f\xb3\x4e\xc5\xe4\x48\x22\x7f\x1f\xfa\x64\xc3\x27\x7c\x95\x08\x7a\x74\xb6\x2d\x87\xdf\xf3\xc6\x71\x72\x88\xd6\x55\x37\x85\xec\x93\x3e\x40\xed\x03\x47\x51\xfb\xfe\xd8\x92\x9c\x6e\xcd\x4b\x2e\x4e\x16\x27\xe4\x7c\xa3\x87\x60\x80\x2d\x54\x59\x7d\x56\xce\x67\x55\x70\xd1\x37\xa5\x68\x91\x96\xeb\xcd\xdf\xbc\x62\x80\x85\x9c\x2d\xbe\xca\xce\xa1\x8f\x8b\x1e\x80\x6d\xc9\x0a\xca\x82\xcd\x26\x46\xfa\x3f\xf6\x9d\xf4\x83\x61\x43\x68\xfb\x6e\x19\x94\x6e\xa2\x07\xcb\x9a\x7b\xaf\x9b\x50\x9f\x91\x95\xa4\xc3\x3c\x2a\x56\x05\xe7\xc2\xa1\x36\xba\xf3\x71\x8a\x38\x94\x4d\x8c\xb5\x3e\x05\x89\xf9\x87\x4d\xa0\xbf\xec\x06\xbc\x30\x0d\xd4\xa2\xc3\xf4\x1a\x22\xf7\x78\xbf\xad\x25\xfc\x0d\x00\x00\xff\xff\xee\xa6\x9e\xf2\xa0\x02\x00\x00")

func dataDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_dataDockerComposeYml,
		"data/docker-compose.yml",
	)
}

func dataDockerComposeYml() (*asset, error) {
	bytes, err := dataDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/docker-compose.yml", size: 672, mode: os.FileMode(420), modTime: time.Unix(1473080439, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/Dockerfile": dataDockerfile,
	"data/docker-compose.yml": dataDockerComposeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"Dockerfile": &bintree{dataDockerfile, map[string]*bintree{
		}},
		"docker-compose.yml": &bintree{dataDockerComposeYml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

