// Code generated by go-bindata.
// sources:
// data/Dockerfile
// data/docker-compose.yml
// DO NOT EDIT!

package docker

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\xcd\x4a\x03\x31\x14\x85\xf7\x79\x8a\x4b\x61\x56\x62\xa2\x20\x2e\x44\x44\x91\x11\x5c\x64\x12\x62\x05\x8b\xb8\x48\x33\x69\x1b\xc8\x4f\xc9\x0f\x08\xd2\x77\x37\x99\x5a\x41\x99\x45\x72\x4f\xbe\x93\x03\x87\xfb\x24\x18\x85\xb2\x2e\x3e\x97\x9b\xcb\x6b\x7c\x71\x85\xe8\xc3\xf3\xb0\xac\xa7\x17\x40\x65\x54\x01\xa8\xd9\x5a\xa3\xa3\xf1\x12\x6e\x5d\x23\xd8\xfd\x92\x7b\xa3\x6c\x28\x23\x56\xc1\xdd\x21\xf4\xc8\xf8\x0a\x54\xf0\x1b\x20\xed\xfe\x01\x49\xe7\xb2\xc7\x69\x07\x24\xbb\x3d\x39\xbd\x90\x78\x1d\x40\xed\x5c\x18\xe1\xec\x73\xc6\xfa\x4b\xd0\x57\x07\x66\x03\x98\x87\x98\x13\x9c\x77\x07\xd4\xbf\x71\xf6\xd2\x57\x1c\xa5\xdf\xea\x93\xd3\x1d\xa0\x22\x5c\x67\x1d\xda\x8f\x55\x4c\xd9\x26\x5b\x6a\x2a\x14\x8b\x9f\xea\x94\x14\x89\x0d\x4a\x5a\xb2\x36\x9e\x1c\xe9\xbf\x5a\xb3\x5f\x50\x3f\x2c\xc5\x8a\xb3\xba\x27\x78\x5f\x1c\xe1\xe2\xe3\x3b\x00\x00\xff\xff\x2e\x03\x14\xc3\x4a\x01\x00\x00")

func dataDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_dataDockerfile,
		"data/Dockerfile",
	)
}

func dataDockerfile() (*asset, error) {
	bytes, err := dataDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Dockerfile", size: 330, mode: os.FileMode(420), modTime: time.Unix(1472748803, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x52\x3d\x6b\xc3\x30\x10\xdd\xf3\x2b\x84\x69\xc8\x64\x09\x3a\x0a\x3a\x64\x2c\x94\xd2\xa1\x7b\x50\xed\xab\x7a\xc4\x96\xc2\x9d\x6c\x5a\x42\xff\x7b\x75\xb1\x49\x94\x38\x4b\x6f\xd1\x7d\xbc\xa7\xf7\xce\xd6\x08\xc4\x18\x83\x55\x9b\xc7\xcd\x8a\x81\x46\x6c\x80\xed\xea\xb8\xae\xd5\x83\x23\xcf\xca\x3e\x29\xbd\x95\x64\xfd\x7b\x5c\x2b\x72\xc1\x83\xd2\xef\x31\x76\xbc\x65\x86\x24\xfd\x95\xca\x91\x87\xfa\xd5\xf5\x90\x6b\x7b\x6a\x48\x7c\x0c\xd8\xb5\x56\x69\x53\x4c\xcf\x43\xec\x9d\x07\x2b\x44\x0c\x2d\x7c\xcf\x7a\x15\xa1\x47\x4e\xf4\xb3\x1b\xb2\x9d\x90\x39\x55\x26\x99\xd8\x07\x74\x75\x29\x72\xcb\x3b\x5d\xc7\xbb\xe4\x7c\x75\xf1\x54\x2b\xfc\x54\xfa\x2d\xd2\xc5\xa8\xc4\x41\x1a\x17\x9b\x82\x9b\x37\x5b\x40\x25\x6a\x55\x89\xf2\xac\x2a\x67\x75\xc5\x85\xd0\x96\x92\x37\xa5\x38\x78\xc1\xb0\xbf\xba\xb6\x93\xc6\x5d\x07\x0b\xe8\xe4\x60\x16\xfe\xa7\xee\x33\x6f\x3d\x84\x54\x12\xc7\xd8\x0d\x3d\x14\xda\xf3\x86\x66\x74\x64\x68\x08\xa6\x8d\xcd\x1e\x48\x73\x3e\xec\xbd\x66\xb5\x60\x1e\x28\x36\xd6\xf4\x21\x4d\x19\xc5\x25\x04\x52\x63\xbe\x22\x27\xf9\xa1\x13\xf4\x5c\x95\xf0\x03\xe1\x88\x1d\x78\xc8\xaf\x26\xd1\x00\x37\xbb\xe5\x8f\x30\x25\x7f\x01\x00\x00\xff\xff\x84\x3a\x06\xea\xb7\x02\x00\x00")

func dataDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_dataDockerComposeYml,
		"data/docker-compose.yml",
	)
}

func dataDockerComposeYml() (*asset, error) {
	bytes, err := dataDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/docker-compose.yml", size: 695, mode: os.FileMode(420), modTime: time.Unix(1472822604, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/Dockerfile": dataDockerfile,
	"data/docker-compose.yml": dataDockerComposeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"Dockerfile": &bintree{dataDockerfile, map[string]*bintree{
		}},
		"docker-compose.yml": &bintree{dataDockerComposeYml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

